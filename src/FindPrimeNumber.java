/*
소수 찾기 / 96min.
https://programmers.co.kr/learn/courses/30/lessons/12921

[문제 설명]
1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, solution을 만들어 보세요.
소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.
(1은 소수가 아닙니다.)

[제한 조건]
n은 2이상 1000000이하의 자연수입니다.

[입출력 예]
1부터 10 사이의 소수는 [2,3,5,7] 4개가 존재하므로 4를 반환
1부터 5 사이의 소수는 [2,3,5] 3개가 존재하므로 3를 반환


[기록]
- 소수는 1과 자기 자신으로만 나누어지기 때문에 그 외의 수로 나누어 지는지 확인하면 된다.
- 해당 수의 제곱근까지 나누어 떨어지는 수가 없으면 소수이므로
나누어 떨어지는 수가 있는지 확인 할 때 해당 수의 제곱근까지만 검사하면 된다.
(나누어지는 수 여부를 제곱근까지가 아닌 해당 수까지 전부 검사하면 효율성 테스트를 통과하지 못 함.)
- 2를 제외한 모든 소수는 홀수이기 때문에 2는 미리 카운트해놓고 3부터 홀수만 검사하는 방식을 썼다.

*/

public class FindPrimeNumber {
	public int solution(int n) {
        int answer = 1; // 2는 항상 포함되는 소수여서 미리 1을 카운트
        boolean chk;
        for(int i=3; i<=n; i+=2){ // 2 이외의 짝수는 소수가 아니므로 3부터 홀수만 검사
            chk = true;
            for(int j=3; j<=i/Math.sqrt(i); j+=2){ // 제곱근 이하까지만 나눠지는지 검사, 홀수만 검사하기 때문에 짝수로 나누어 볼 필요 X
                if(i%j==0){ // 나누어 떨어지는 수가 있으면 소수가 아님
                    chk = false;
                    break;
                }
            }
            if(chk) answer++; // 나누어 떨어지는 수가 없으면 소수의 개수 카운트
        }
        return answer;
    }
}
