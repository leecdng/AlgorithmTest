/*
폰켓몬 / 86min.
https://programmers.co.kr/learn/courses/30/lessons/1845


[문제 설명]
당신은 폰켓몬을 잡기 위한 오랜 여행 끝에, 홍 박사님의 연구실에 도착했습니다. 홍 박사님은 당신에게 자신의 연구실에 있는 총 N 마리의 폰켓몬 중에서 N/2마리를 가져가도 좋다고 했습니다.
홍 박사님 연구실의 폰켓몬은 종류에 따라 번호를 붙여 구분합니다. 따라서 같은 종류의 폰켓몬은 같은 번호를 가지고 있습니다. 
예를 들어 연구실에 총 4마리의 폰켓몬이 있고, 각 폰켓몬의 종류 번호가 [3번, 1번, 2번, 3번]이라면 이는 3번 폰켓몬 두 마리, 1번 폰켓몬 한 마리, 2번 폰켓몬 한 마리가 있음을 나타냅니다. 
이때, 4마리의 폰켓몬 중 2마리를 고르는 방법은 다음과 같이 6가지가 있습니다.

첫 번째(3번), 두 번째(1번) 폰켓몬을 선택
첫 번째(3번), 세 번째(2번) 폰켓몬을 선택
첫 번째(3번), 네 번째(3번) 폰켓몬을 선택
두 번째(1번), 세 번째(2번) 폰켓몬을 선택
두 번째(1번), 네 번째(3번) 폰켓몬을 선택
세 번째(2번), 네 번째(3번) 폰켓몬을 선택
이때, 첫 번째(3번) 폰켓몬과 네 번째(3번) 폰켓몬을 선택하는 방법은 한 종류(3번 폰켓몬 두 마리)의 폰켓몬만 가질 수 있지만, 다른 방법들은 모두 두 종류의 폰켓몬을 가질 수 있습니다. 
따라서 위 예시에서 가질 수 있는 폰켓몬 종류 수의 최댓값은 2가 됩니다.
당신은 최대한 다양한 종류의 폰켓몬을 가지길 원하기 때문에, 최대한 많은 종류의 폰켓몬을 포함해서 N/2마리를 선택하려 합니다. 
N마리 폰켓몬의 종류 번호가 담긴 배열 nums가 매개변수로 주어질 때, N/2마리의 폰켓몬을 선택하는 방법 중, 가장 많은 종류의 폰켓몬을 선택하는 방법을 찾아, 
그때의 폰켓몬 종류 번호의 개수를 return 하도록 solution 함수를 완성해주세요.


[제한사항]
nums는 폰켓몬의 종류 번호가 담긴 1차원 배열입니다.
nums의 길이(N)는 1 이상 10,000 이하의 자연수이며, 항상 짝수로 주어집니다.
폰켓몬의 종류 번호는 1 이상 200,000 이하의 자연수로 나타냅니다.
가장 많은 종류의 폰켓몬을 선택하는 방법이 여러 가지인 경우에도, 선택할 수 있는 폰켓몬 종류 개수의 최댓값 하나만 return 하면 됩니다.


[입출력 예]
	nums		  result
--------------------------
[3,1,2,3]			2
[3,3,3,2,2,4]		3
[3,3,3,2,2,2]		2


[입출력 예 설명]
입출력 예 #1
문제의 예시와 같습니다.

입출력 예 #2
6마리의 폰켓몬이 있으므로, 3마리의 폰켓몬을 골라야 합니다.
가장 많은 종류의 폰켓몬을 고르기 위해서는 3번 폰켓몬 한 마리, 2번 폰켓몬 한 마리, 4번 폰켓몬 한 마리를 고르면 되며, 따라서 3을 return 합니다.

입출력 예 #3
6마리의 폰켓몬이 있으므로, 3마리의 폰켓몬을 골라야 합니다.
가장 많은 종류의 폰켓몬을 고르기 위해서는 3번 폰켓몬 한 마리와 2번 폰켓몬 두 마리를 고르거나, 혹은 3번 폰켓몬 두 마리와 2번 폰켓몬 한 마리를 고르면 됩니다. 
따라서 최대 고를 수 있는 폰켓몬 종류의 수는 2입니다.


[기록]
- 가장 많은 종류의 폰켓몬을 선택할 때의 폰켓몬 종류의 수를 구하는 것이기 때문에
결국은 고를 수 있는 최대 폰켓몬 수인 n/2 이하의 중복되지 않은 최대 폰켓몬 수를 구하면 된다.

- 1번 방법 : answer에 전체 폰켓몬 수(n)을 미리 담고, 배열에서 중복값을 검사해 중복이 있으면 answer를 차감하는 방법
		최종 answer값이 고를 수 있는 최대 폰켓몬 수인 n/2보다 크면 n/2를 리턴

- 2번 방법 : 중복되지 않은 폰켓몬을 담는 List를 만들고, List에 담길 때마다 카운트 하여 answer를 증가시키는 방법
		answer가 고를 수 있는 최대 폰켓몬 수인 n/2와 같아지면 반복문을 종료하고 바로 answer를 리턴

- 했으면 좋았을 방법 : 1번, 2번 방법 모두 중복값이 없는 Set을 이용하여 배열을 옮기고 Set의 크기와 비교했으면 좋았을 것 같다.

*/

import java.util.*;

public class Phonekemon {
	// 1. 해결한 방법
	public int solution(int[] nums) {        
        int answer = nums.length;	// 전체 폰켓몬 수
        for(int i=1; i<nums.length; i++){
            for(int j=0; j<i; j++){
                if(nums[i]==nums[j]){
                    answer--;	// 중복되는 폰켓몬 수 차감
                    break;
                }
            }
        }
        if(answer>nums.length/2) answer=nums.length/2;	// 중복되지 않은 폰켓몬의 수가 n/2를 넘으면 n/2를 반환
        return answer;
    }
	
	// 2. 처음에 시도한 방법
	/*
		처음에 아래 1, 2번 if문 순서를 바꿔써서 테스트 1개를 통과하지 못 했음.
		[1, 2]와 같이 전체 폰켓몬이 2마리, 폰켓몬 종류의 수도 2마리일 때 1을 반환해야 하는데 2를 반환하기 때문.
	*/
	public int solution2(int[] nums) {
        if(nums.length<2) return 0;
        List<Integer> list = new ArrayList<Integer>();
        list.add(nums[0]); // 처음 한 마리는 어차피 중복되지 않으니 미리 넣어둠. for문 돌릴 때 중복 비교를 하기 위해.
        int answer = 1;
        for(int i=1; i<nums.length; i++){
            if(answer>=nums.length/2){ // 1번 if
                break;	// 중복되지 않은 폰켓몬 수가 n/2 이상이 되면 반복문 종료하고 n/2를 리턴
            }
            if(!list.contains(nums[i])) { // 2번 if
                answer++;
                list.add(nums[i]);
            }
        }
        return answer;
    }
}
